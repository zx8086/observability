---
- ansible.builtin.set_fact: beats_package="filebeat"
  when: beats_package is undefined

- name: "{{ beats_package }} | Check For Prior Downloads"
  ansible.builtin.stat:
    path: "/Users/Simon/Downloads/{{ beats_package }}-{{ beats_version }}-darwin-x86_64.tar.gz"
  register: is_downloaded

- name: "{{ beats_package }} | Download Files"
  ansible.builtin.get_url:
    timeout: 240
    url: "{{ beats_url }}/{{ beats_package }}/{{ beats_package }}-{{ beats_version }}-darwin-x86_64.tar.gz"
    dest: "/Users/Simon/Downloads"
  when: is_downloaded.stat.exists == False

# - name: Unarchive a file that needs to be downloaded (added in 2.0)
#   ansible.builtin.unarchive:
#     src: "{{ beats_url }}/{{ beats_package }}/{{ beats_package }}-{{ beats_version }}-darwin-x86_64.tar.gz"
#     dest: "/Users/Simon/Documents/{{ beats_package }}"
#     remote_src: yes

- name: "{{ beats_package }} | Extract Downloaded File"
  ansible.builtin.command: tar xzvf "/Users/Simon/Downloads/{{ beats_package }}-{{ beats_version }}-darwin-x86_64.tar.gz"
  args:
    chdir: "/Users/Simon/Documents"

- name: "{{ beats_package }} | Check Existing Installation"
  ansible.builtin.stat:
    path: "/Users/Simon/Documents/{{ beats_package}}"
  register: is_installed

### Maybe a block for the following two takss based on is_installed
- name: "{{ beats_package }} | Remove Existing Installation Status"
  block:

    - name: "{{ beats_package }} | Remove Existing Installation"
      ansible.builtin.file:
        path: "/Users/Simon/Documents/{{ beats_package }}"
        state: absent

    # - name: "{{ beats_package }} | Remove Download Zip"
    #   ansible.builtin.file:
    #     path: "/Users/Simon/Downloads/{{ beats_package }}-{{ beats_version }}-darwin-x86_64.tar.gz"
    #     state: absent
   # rescue:
   #   - name: Print when errors
   #     ansible.builtin.debug:
   #       msg: 'I caught an error, can do stuff here to fix it, :-)'

  when: is_installed.stat.exists == True
  become: true
  become_user: root
  ignore_errors: yes

### ----- --path.logs

- name: "{{ beats_package }} | Rename Extracted Installation Folder"
  command: mv "/Users/Simon/Documents/{{ beats_package }}-{{ beats_version }}-darwin-x86_64" "/Users/Simon/Documents/{{ beats_package }}"

- name: "{{ beats_package }} | Remove Temp Installation Folder"
  ansible.builtin.file:
    path: "/Users/Simon/Downloads/{{ beats_package }}-{{ beats_version }}-darwin-x86_64"
    state: absent

- name: "{{ beats_package }} | Stop LaunchDaemon Prior For Existing Installation"
  ansible.builtin.shell: launchctl unload "{{beats_daemon_x86_64}}/co.elastic.{{ beats_package }}.plist"
  notify: "Restart Beats LaunchDaemon"
  become: true
  become_user: root

### Configuration Block
- name: "{{ beats_package }} | Copy {{ beats_package }}.yml Configuration"
  ansible.builtin.template:
    src: roles/beats/templates/{{ beats_package }}.yml.j2
    dest: "/Users/Simon/Documents/{{ beats_package }}/{{ beats_package }}.yml"
    owner: root
    group: wheel
    mode: u=rw,g-rwx,o-rwx
  become: true
  become_user: root
  tags:
    - beat_config

- name: "{{ beats_package }} | Set Permissions {{ beats_package }} 'module' Directory"
  ansible.builtin.file:
    path: "/Users/Simon/Documents/{{ beats_package }}/module"
    state: directory
    owner: root
    group: wheel
    mode: u=rw,g-rwx,o-rwx
    recurse: yes

  become: true
  become_user: root
  ignore_errors: yes
  tags:
    - input_config

- name: "{{ beats_package }} | Create {{ beats_package }} 'inputs.d' Directory"
  ansible.builtin.file:
    path: "/Users/Simon/Documents/{{ beats_package }}/inputs.d"
    state: directory
    owner: root
    group: wheel
    mode: u=rw,g-rwx,o-rwx
  become: true
  become_user: root
  ignore_errors: yes
  tags:
    - input_config

- name: "{{ beats_package }} | Copy {{ beats_package }} 'inputs.d' Configurations"
  ansible.builtin.template:
    src: roles/beats/templates/inputs.d/plex.yml.j2
    dest: "/Users/Simon/Documents/{{ beats_package }}/inputs.d/plex.yml"
    owner: root
    group: wheel
    mode: u=rw,g-rwx,o-rwx
  become: true
  become_user: root
  ignore_errors: yes
  tags:
    - beat_config

- name: "{{ beats_package }} | Create {{ beats_package }} 'modules.d' Directory"
  ansible.builtin.file:
    path: "/Users/Simon/Documents/{{ beats_package }}/modules.d"
    state: directory
    owner: root
    group: wheel
    mode: u=rw,g-rwx,o-rwx
  become: true
  become_user: root
  ignore_errors: yes
  tags:
    - beat_config
     
- name: "{{ beats_package }} | Copy {{ beats_package }} 'modules.d' Configurations"
  ansible.builtin.template:
    src: "roles/beats/templates/modules.d/{{item}}.yml.j2"
    dest: "/Users/Simon/Documents/{{ beats_package }}/modules.d/{{item}}.yml.disabled"
    owner: root
    group: wheel
    mode: u=rw,g-rwx,o-rwx
  become: true
  become_user: root
  ignore_errors: yes
  loop:
    - system
    - elasticsearch
    - kibana

- name: "{{ beats_package }} | Copy {{ beats_package }} LaunchDaemon" 
  ansible.builtin.template:
    src: roles/beats/templates/co.elastic.{{ beats_package }}.plist.j2
    dest: "{{beats_daemon_x86_64}}/co.elastic.{{ beats_package }}.plist"
  become: true
  become_user: root
  tags:
      - beat_config_reload

- name: "{{ beats_package }} | Enabling {{ beats_package }} Modules" 
  ansible.builtin.shell:
    cmd: "./{{ beats_package }} modules enable {{ item }}"
    chdir: "/Users/Simon/Documents/{{ beats_package }}"
  loop:
    - system
    - elasticsearch
    - kibana
  register: enabled_modules
  become: true
  become_user: root
  tags:
    - beat_config
  ignore_errors: yes

- debug:
    msg: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}"

# - name: Attempt and graceful roll back demo
#   block:
#     - name: Print a message
#       ansible.builtin.debug:
#         msg: 'I execute normally'

#     - name: Force a failure
#       ansible.builtin.command: /bin/false

#     - name: Never print this
#       ansible.builtin.debug:
#         msg: 'I never execute, due to the above task failing, :-('
#   rescue:
#     - name: Print when errors
#       ansible.builtin.debug:
#         msg: 'I caught an error'

#     - name: Force a failure in middle of recovery! >:-)
#       ansible.builtin.command: /bin/false

#     - name: Never print this
#       ansible.builtin.debug:
#         msg: 'I also never execute :-('
#   always:
#     - name: Always do this
#       ansible.builtin.debug:
#         msg: "This always executes"

 # tasks:
 #   - name: Attempt and graceful roll back demo
 #     block:
 #       - name: Print a message
 #         ansible.builtin.debug:
 #           msg: 'I execute normally'
 #         changed_when: yes
 #         notify: run me even after an error

 #       - name: Force a failure
 #         ansible.builtin.command: /bin/false
 #     rescue:
 #       - name: Make sure all handlers run
 #         meta: flush_handlers
 # handlers:
 #    - name: Run me even after an error
 #      ansible.builtin.debug:
 #        msg: 'This handler runs even on error'

 #  